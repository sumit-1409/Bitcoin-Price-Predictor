# -*- coding: utf-8 -*-
"""Bitcoin predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GDiygpbwMY5VQYvSKBg-FxQeRFf7vYSh
"""

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
plt.style.use('fivethirtyeight')

end=datetime.now()
start=datetime(end.year-15,end.month,end.day)
stock='BTC-USD'
stock_data=yf.download(stock,start=start,end=end)

#5 years ago data
stock_data.head()

#todays data
stock_data.tail()

#taking summary of the data of past 5 years
stock_data.describe()

#close price data comparison
closing_price=stock_data[['Close']]

closing_price['Close']

#plot closing price with enhancement
plt.figure(figsize=(15,6))
plt.plot(closing_price.index,closing_price['Close'], label='Close Price' , color = 'blue', linewidth= 2)
plt.title("Close price of bitcoin overtime", fontsize =16)
plt.xlabel("Years", fontsize =14)
plt.ylabel("Close Price", fontsize =14)
plt.grid(alpha =0.3)
plt.legend(fontsize= 12)
plt.show

#Moving Average
temp_data=[10,20,30,40,50,60,70,80,90,100]
#moving average for 5 days ->  null null null null 30.0 40.0
print(sum(temp_data[1:6])/5)

df1=pd.DataFrame(temp_data)
df1.rolling(5).mean()

for i in range (2014,2024):
    print(i,list(stock_data.index.year).count(i))

closing_price['MA_365']=closing_price['Close'].rolling(window = 365).mean()
closing_price['MA_100']=closing_price['Close'].rolling(window = 100).mean()

#plot closing price with enhancement
plt.figure(figsize=(15,6))
plt.plot(closing_price.index,closing_price['Close'], label='Close Price' , color = 'blue', linewidth= 2)
plt.plot(closing_price.index,closing_price['MA_365'], label='365 Days' , color = 'red', linestyle="--",linewidth= 2)
plt.plot(closing_price.index,closing_price['MA_100'], label='100 Days' , color = 'green',linestyle="--", linewidth= 2)
plt.title("Close price with Moving Average", fontsize =16)
plt.xlabel("Years", fontsize =14)
plt.ylabel("Price", fontsize =14)
plt.grid(alpha =0.3)
plt.legend(fontsize= 12)
plt.show

#LSTM -> Long Short Term Memory
#scale the data
from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(closing_price[['Close']].dropna())

len(scaled_data)

from keras.models import Sequential
from keras.layers import Dense,LSTM

#Prepare data for LSTM
x_data =[]
y_data=[]
base_days =100
for i in range(base_days,len(scaled_data)):
  x_data.append(scaled_data[i-base_days: i])
  y_data.append(scaled_data[i])
x_data = np.array(x_data)
y_data = np.array(y_data)

#Split into train and test sets
train_size = int(len(x_data)* 0.9)
x_train,y_train = x_data[:train_size],y_data[:train_size]
x_test,y_test = x_data[train_size:],y_data[train_size:]

model=Sequential([
      LSTM(128,return_sequences= True,input_shape = (x_train.shape[1],1)),
      LSTM(64,return_sequences= False),
      Dense(25),
      Dense(1)
      ])
model.compile(optimizer = "adam",loss = "mean_squared_error")
model.summary()

model.fit(x_train,y_train,batch_size= 10, epochs = 5)

predictions=model.predict(x_test)
inversse_predictions=scaler.inverse_transform(predictions)
inverse_y_test=scaler.inverse_transform(y_test)

plotting_data=pd.DataFrame(
    {
        'Original':inverse_y_test.flatten(),
        'Predicted':inversse_predictions.flatten()
    },index=closing_price.index[train_size+ base_days:]
)

plt.figure(figsize=(15,6))
plt.plot(plotting_data.index,plotting_data['Original'], label='Original' , color = 'blue', linewidth= 2)
plt.plot(plotting_data.index,plotting_data['Predicted'], label='Prediction ' , color = 'red', linewidth= 2)
plt.title("Prediction vs Actual Close Price", fontsize =16)
plt.xlabel("Years", fontsize =14)
plt.ylabel("Close Price", fontsize =14)
plt.grid(alpha =0.3)
plt.legend(fontsize= 12)
plt.show

#Predict future days
last_100 = scaled_data[-100:].reshape(1,-1,1)
future_predictions=[]
for _ in range(10):
  next_days = model.predict(last_100)
  future_predictions.append(scaler.inverse_transform(next_days))
  last_100 = np.append(last_100[:,1:,:],next_days.reshape(1,-1,1),axis=1)

future_predictions

future_predictions = np.array(future_predictions).flatten()


plt.figure(figsize=(15,6))
plt.plot(range(1,11),future_predictions,marker="o",label = 'Prediction Future Prices',color='purple',linewidth=2)

for i,val in enumerate(future_predictions):
  plt.text(i+1,val,f'{val:.2f}',fontsize=10,ha='center', va = 'bottom',color ='black')

plt.title("Future Close Price for 10 Days", fontsize =16)
plt.xlabel("Day Ahead", fontsize =14)
plt.ylabel("Close Price", fontsize =14)
plt.grid(alpha =0.3)
plt.legend(fontsize= 12)
plt.show()

model.save("model.keras")











